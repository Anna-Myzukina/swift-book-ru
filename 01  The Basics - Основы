
<h3>The Basics</h3>

Swift - это новый язык программирования для разработки приложений для iOS, macOS, watchOS и tvOS.
Тем не менее, многие части Swift будут знакомы из вашего опыта разработки на C и Objective-C.

Swift предоставляет свои собственные версии всех основных типов C и Objective-C, включая Int для целых чисел, 
Double и Float для значений с плавающей запятой, Bool для логических значений и String для текстовых данных. 
Swift также предоставляет мощные версии трех основных типов коллекций, Array, Set и Dictionary,
как описано в Collection Types ( https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html )

Как и C, Swift использует переменные для хранения и обращения к значениям по идентифицирующему имени.
Swift также широко использует переменные, значения которых не могут быть изменены. 
Они известны как константы и являются гораздо более мощными, чем константы в C.
Константы используются в Swift, чтобы сделать код более безопасным и понятным, 
когда вы работаете со значениями, которые не нужно изменять.

В дополнение к знакомым типам, Swift представляет расширенные типы, которых нет в Objective-C, такие как кортежи.
Кортежи позволяют создавать и передавать группы значений. 
Вы можете использовать кортеж для возврата нескольких значений из функции в виде одного составного значения.

Swift также вводит необязательные/Optionals типы, которые обрабатывают отсутствие значения.
Необязательные/Optionals говорят, что «есть значение, и оно равно x», или «значение вообще не существует».
Использование Optionals похоже на использование nil с указателями в Objective-C, 
но они работают для любого типа, а не только для классов. 
Optionals опции не только более безопасны и более выразительны,
чем nil указатели в Objective-C, но и лежат в основе многих наиболее мощных функций Swift.

Swift - это типобезопасный язык, который означает, что он поможет вам понять типы значений, с которыми может работать ваш код.
Если часть вашего кода требует String, безопасность типа не позволяет вам передать ему Int по ошибке.
Аналогично, безопасность типов предотвращает случайную передачу optional String в фрагмент кода,
для которого требуется nonoptional String. 
Безопасность типов помогает выявлять и исправлять ошибки как можно раньше в процессе разработки.

Constants and Variables
